== BSM Ordering System

This is currently unfinished and, in my opinion, some of the model validation for
Order needs refactored.

* Order
At the moment, Order has a lot of validation in it, particularly with regard to 
deciding what status updates are appropriate for it. This leads to some repeated
chunks of 'case... when...' code that needs tidied up. This obviously points to a
State design pattern. Order would have a reference to an OrderStatusState object, 
which would actually reference one of four OrderStatusState subclasses. All the 
subclasses contain the template methods move_to_draft, move_to_placed, move_to_paid 
and move_to_cancelled. The OrderStatusState subclasses would be DraftStatusState,
PlacedStatusState, PaidStatusState and CancelledStatusState. They would have a reference
to the original Order object. The code in those template methods would simply be the code 
from Order refactored from save_as_draft, save_as_placed, save_as_paid and save_as_cancelled.

You can see the current code (not refactored like above) for Order in link:app/models/order.rb

* OrderStatus and Status
I could be accused of maybe over-engineering this. Why the need for a one-to-many relationship
between Order and OrderStatus, followed by a many-to-one relationship between OrderStatus and
Status? I felt the need to do this, as pretty much every company I've ever worked for has needed
some sort of "state transition" code written and it's always been easier to maintain, if a lot of
the states are stored in the database. In addition, the individual states getting their own 
database table means it's easy enough to add any new states that the client/customer/project 
manager suddenly surprise you with. With the OrderStatus "join" table, it means Status is less
coupled to Order and, more pertinently, it's very easy to get an audit trail of an Order's 
lifecycle, showing a list of the OrderStatuses (and their associated Status objects), if an
OrderStatus Controller is ever needed (currently, there isn't one, however).

You can see the current code for OrderStatus at link:app/models/order_status.rb
You can see the current code for Status at link:app/models/status.rb

* Functional tests
I made a start on the functional tests for the Controllers. Currently, this meant installing
the 'assert_json' gem, which allows for some nice assertions to be written regarding response
bodies of HTTP requests that contain JSON. There have been some basic tests written, but these
would have been filled out a lot more, after I'd finished off the Model validation refactoring 
for Order (see above). I suspect I would've rewritten some of the Controller stuff so that the 
JSON status updates for Orders could be done a lot easier. Seeing as all the Ruby On Rails 
stuff that I've done has involved web interfaces with forms, I tentatively admit this is new 
territory for me. With a web interface form, it'd be very easy to create a special Order form,
with the appropriate dropdown Status field to set it with, so that the OrderStatus "audit" would
just get added to. 

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |   |   |-- images
  |   |   |-- javascripts
  |   |   `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   |-- assets
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   `-- cache
  |       `-- assets
  `-- vendor
      |-- assets
      |   |-- javascripts
      |   `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
